afk: '<&7>* <&r><player.list_name> <&7>went afk'
afkback: '<&7>* <&r><player.list_name> <&7>is back'
afkplnotonline: '<&3>[AFK] This player is not online'
afkother: '<&7>* <&r><server.match_player[<context.args.get[1]>].list_name> <&7>went afk'
afkotherback: '<&7>* <&r><server.match_player[<context.args.get[1]>].list_name> <&7>went afk'
bedspawnset: '<&3>[Bed] Your <&b>Bedspawn <&3>has been set!'
comnobedspawn: '<&3>[Compass] Your <&b>Bedspawn <&3>is not set yet. Pointing to <&b>Spawn <&3>instead'
comspawn: '<&3>[Compass] Your compass now points to the <&b>Spawn'
combedspawn: '<&3>[Compass] Your compass now points to your <&b>Bedspawn'
mailsend: '<&3>[Mail] Your mail was successfully sent'
mailempty: '<&3>[Mail] You can not send empty messages'
mailplnotexist: '<&3>[Mail] This player does not exist'
mailneedplayer: '<&3>[Mail] You need to specify a player'
mailboxempty: '<&3>[Mail] Your Mailbox is empty'
mailread: '<&3>[Nr<[loop_index]>]<&r> <player[<yaml[Utilizen_<player.uuid>].read[mailbox.<[value]>].first>].name> writes: <yaml[Utilizen_<player.uuid>].read[mailbox.<[value]>].last>'
maildelete: '<&3>[Mail] Your mails have been deleted'
mailsendall: '<&3>[Mail] Your mail was successfully sent to all players'
mailallarguments: '<&3>[Mail] Use <&b>/mail send [Player] [Text]<&3> or <&b>/mail [read|remove]'
meempty: '<&3>[Me] You need to specify a text'
me: '<&5>*<&r> <player.list_name||The Server><&r> <&7><context.raw_args>'
msgsent: '[<player.list_name><&r> --> <server.match_player[<context.args.get[1]>].list_name><&r>] <context.args.remove[1].space_separated>'
msgempty: '<&3>[MSG] You need to specify a text'
msgplnotonline: '<&3>[MSG] This player is not online'
msgplnotexist: '<&3>[MSG] This player does not exist'
msgsyntax: '<&3>[MSG] Syntax <&b>/msg [Player] [Text]'
nickcolorchanged: '<&3>[Nickcolor] Your nickname is now <player.list_name>'
nickcolorwrong: '<&3>[Nickcolor] Your selected color does not exist'
nickcolornocolor: '<&3>[Nickcolor] You need to choose a color code <&b>Aqua <&0>Black <&9>Blue <&3>Dark_aqua <&1>Dark_blue <&8>Dark_gray <&2>Dark_green <&5>Dark_purple <&4>Dark_red <&6>Gold <&7>Gray <&a>Green <&d>Lightpurple <&c>Red <&f>White <&e>Yellow'
nicksuccess: '<&3>[Nick] Your nickname has been successfully changed'
nickinuse: '<&3>[Nick] Your choosen nickname is already in use!'
nickchanged: '<&3>[Nick] Your nickname is now: <[nick]>'
nickdelete: '<&3>[Nick] Your old nickname has been restored'
nickplnotexist: '<&3>[Nick] This player does not exist'
nicksyntax: '<&3>[Nick] Syntax: <&b>/nick [Player] [Nickname] <&3>or <&b>/nick [Player]'
shownicknonick: '<&3>[Shownick] You need to specify a valid nickname'
shownicksyntax: '<&3>[Shownick] Syntax: <&b>/shownick [Player]'
shownicknonicked: '<&3>[Shownick] There are no nicked players'
warpcreate: '<&3>[Warp] Warp <&b><context.args.first> <&3>created'
warpnoname: '<&3>[Warp] Your Warp need a name'
warpdelete: '<&3>[Warp] Your Warp <&b><context.args.first> <&3>has been successfully deleted'
warpnotexist: '<&3>[Warp] This Warp does not exist'
warpnoarg: '<&3>[Warp] You need to define a Warp'
warpsuccess: '<&3>[Warp] You successfully warped to <&b><context.args.first>'
warpedbyadmin: '<&3>[Warp] You were successfully teleported from an Admin to <&b><context.args.first>'
warpedplayer: '<&3>[Warp] You successfully teleported <&b><server.match_player[<context.args.get[2]>].list_name> <&3>to <&b><context.args.first>'
warplist: '<&3>[Warp] The following warps exist: <&b><yaml[UtilizenServerdata].list_keys[warps].separated_by[<&3>, <&b>]>'
jailcreate: '<&3>[Jail] Jail <&b><context.args.first> <&3>created'
jailnoname: '<&3>[Jail] You need to define a jailname'
jaildeleted: '<&3>[Jail] Jail <&b><context.args.first> <&3>deleted'
jailnotexist: '<&3>[Jail] This Jail does not exist'
jailnojail: '<&3>[Jail] No Jail specified'
jailnotinjail: '<&3>[Jail] This player is not jailed'
jailplnotexist: '<&3>[Jail] This player does not exist'
jailnoplayer: '<&3>[Jail] You need to specify a jailed player'
jailjailedadmin: '<&3>[Jail] You jailed <&r><server.match_player[<context.args.first>].list_name><&3> to <&b><context.args.get[2]> <&3>for <duration[<context.args.get[3]>].formatted>'
jailexit: '<&3>[Jail] You have served your sentence'
jailtimeinvalid: '<&3>[Jail] The specified time is invalid'
jailnotime: '<&3>[Jail] You need to specify a time'
jailwrongsyntax: '<&3>[Jail] Invalid Syntax. Syntax: <&b>/jail [Player] [Jailname] [Time]'
jailalreadyjailed: '<&3>[Jail] This player is already jailed'
jailsyntax: '<&3>[Jail] Syntax <&b>/jail [Player] [Jailname] [Time]'
jailstilljailed: '<&3>[Jail] You still have to serve your sentence!'
jailnopermission: '<&3>[Jail] You are not allowed to do this, until you have served your sentence!'
hatoccupied: '<&3>[Hat] The helmet-slot is occupied'
spawn: '<&3>[Spawn] You are at the spawn now'
backinvalid: '<&3>[Back] You have no Back-Point'
flyactivated: '<&3>[Fly] Flymode activated'
flydeactivated: '<&3>[Fly] Flymode deactivated'
flyactivatedotherpl: '<&3>[Fly] You activated flymode for <&b><server.match_player[<context.args.first>]>'
flydeactivatedotherpl: <&3>[Fly] You deactivated flymode for <&b><server.match_player[<context.args.first>]>'
vanishactivated: '<&3>[Vanish] You are now <&r>invisible<&3>!'
vanishdeactivated: '<&3>[Vanish] You are now <&r>visible<&3>!'
burntimeinvalid: '<&3>[Burn] The specified time is invalid'
burnnotime: '<&3>[Burn] You need to specify a time'
burnplnotexist: '<&3>[Burn] This player does not exist'
burnsyntax: '<&3>[Burn] Syntax: <&b>/burn [Player] [Time]'
healhealed: '<&3>[Heal] You were cured'
healadmin: '<&3>[Heal] You cured <player.list_name>'
healplnotexist: '<&3>[Heal] This player does not exist'
feedfeeded: '<&3>[Feed] Your appetite has been satisfied'
feedadmin: '<&3>[Feed] You satisfied the appetite of <player.list_name>'
bantimeinvalid: '<&3>[Ban] Invalid time!'
banplnotexist: '<&3>[Ban] This player does not exist'
bansyntax: '<&3>[Ban] Syntax <&b>/ban [Player] (Reason) (Time)'
unbaned: '<&3>[Utilizen] Player <server.match_offline_player[<context.args.get[1]>].name> has been unbanned by <&r><player.name>'
unbannotbanned: '<&3>[Unban] This player is not banned'
unbanplnotexist: '<&3>[Unban] This player does not exist'
unbansyntax: '<&3>[Unban] Syntax: <&b>/unban [Player]'
kickwrongsyntax: '<&3>[Kick] Invalid Syntax. Syntax: <&b>/kick [Player] (Reason)'
kickplnotexist: '<&3>[Kick] This player does not exist'
kicksyntax: '<&3>[Kick] Syntax: <&b>/kick [Player] (Reason)'
gamemodechanged: '<&3>[Gamemode] Your gamemode is now <&r><player.gamemode>'
gamemodeneedpermsurvival: '<&3>[Gamemode] You need the permission <&b>utilizen.gamemode.survival'
gamemodeneedpermcreative: '<&3>[Gamemode] You need the permission <&b>utilizen.gamemode.creative'
gamemodeneedpermadventure: '<&3>[Gamemode] You need the permission <&b>utilizen.gamemode.adventure'
gamemodeneedpermspectator: '<&3>[Gamemode] You need the permission <&b>utilizen.gamemode.spectator'
gamemodeneedpermother: '<&3>[Gamemode] You need the permission <&b>utilizen.gamemode.other'
gamemodechangedother: '<&3>[Gamemode] You changed the gamemode from <&b><server.match_player[<context.args.get[2]>].name> <&3>to <&r><server.match_player[<context.args.get[2]>].gamemode>'
gamemodeplnotexist: '<&3>[Gamemode] This player does not exist'
gamemodesyntax: '<&3>[Gamemode] Syntax: <&b>/gamemode [Gamemode] (Player)'
gamemodevalidmode: '<&3>[Gamemode] Valid Modes are: <&b>survival<&3>, <&b>creative<&3>, <&b>adventure<&3>, <&b>spectator<&3>, <&b>0<&3>, <&b>1<&3>, <&b>2<&3>, <&b>3'
weathernotexist: '<&3>[Weather] This type of weather does not exist. Possible types: <&b><list[sun|rain|storm].separated_by[<&3>, <&b>]>'
weathertypes: '<&3>[Weather] Possible types: <&b><list[sun|rain|storm].separated_by[<&3>, <&b>]>'
weatherstormduration: '<&3>[Weather] Weather was set to <&b>storm for <duration[<context.args.last>].formatted>'
weatherrainduration: '<&3>[Weather] Weather was set to <&b>rain for <duration[<context.args.last>].formatted>'
weathersunduration: '<&3>[Weather] Weather was set to <&b>sun for <duration[<context.args.last>].formatted>'
weatherstorm: '<&3>[Weather] Weather was set to <&b>storm'
weatherrain: '<&3>[Weather] Weather was set to <&b>rain'
weathersun: '<&3>[Weather] Weather was set to <&b>sun'
timeday: '<&3>[Time] It is now <&r>Day'
timenight: '<&3>[Time] It is now <&r>Night'
timevariable: '<&3>[Time] The time has been set to <context.args.get[2]>'
timetohigh: '<&3>[Time] The argument must be a number and may not exceed 24000'
timeargnotexist: '<&3>[Time] This argument does not exist'
teleporttoplayer: '<&3>[Teleport] Teleported <&b><player.list_name><&3> to <&b><server.match_player[<context.args.get[1]>].list_name>'
teleportwrongsyntax1: '<&3>[Teleport] Wrong Syntax, Syntax: <&b>/tp [Player]'
teleportpltopl: '<&3>[Teleport] Teleported <&b><server.match_player[<context.args.get[1]>].list_name> <&3>to <&b><server.match_player[<context.args.get[2]>].list_name>'
teleportwrongsyntax2: '<&3>[Teleport] Wrong Syntax, Syntax <&b>/tp [Player1] [Player2]'
teleporttopos: '<&3>[Teleport] Teleported to position <&b><context.args.get[1]> <context.args.get[2]> <context.args.get[3]>'
teleportwrongsyntax3: '<&3>[Teleport] Wrong Syntax, Syntax <&b>/tppos [X] [Y] [Z]'
teleporttoworld: '<&3>[Teleport] Teleported to position <&b><context.args.get[1]> <context.args.get[2]> <context.args.get[3]> in world <context.args.get[4]>'
teleportwrongsyntax4: '<&3>[Teleport] Wrong Syntax, Syntax <&b>/tppos [X] [Y] [Z] (World)'
teleportpossyntax: '<&3>[Teleport] Syntax <&b>/tppos [X] [Y] [Z] (World)'
teleportsyntax: '<&3>[Teleport] Syntax: <&b>/tp [Position/Player] (Player)'
tphereadmin: '<&3>[Tphere] You have been teleported to <&b><player.list_name>'
tphereplnotexist: '<&3>[Tphere] This player does not exist'
tpheresyntax: '<&3>[Tphere] Syntax: <&b>/tphere [Player]'
godactivated: '<&3>[God] Godmode activated'
goddeactivated: '<&3>[God] Godmode deactivated'
invseeplnotonline: '<&3>[Invsee] This player is not online'
invseecantopenown: '<&3>[Invsee] You can not open your own inventory'
invseesyntax: '<&3>[Invsee] Syntax: <&b>/invsee [Player]'
clearinventoryadmin: '<&3>[Clear] You have cleared the inventory of <server.match_player[<context.args.get[1]>]>'
clearinventoryadmincleared: '<&3>[Clear] Your inventory has been cleared by an admin'
clearinventoryplnotexist: '<&3>[Clear] This player does not exist'
clearinventorycleared: '<&3>[Clear] Your inventory has been cleared'
sethomenoargs: '<&3>[Home] You need to set a home name!'
sethomeset: '<&3>[Home] Your home point was set!'
sethomealreadyset: '<&3>[Home] You already have a Home called <&b><context.args.first>'
sethometomuchhome: '<&3>[Home] You have already reached the max amount of homes.'
delhomedeleted: '<&3>[Home] You deleted the home called <&b><context.args.get[1]> <&3>from <&b><context.args.get[2]>'
delhomeowndelete: '<&3>[Home] You deleted your home called <&b><context.args.get[1]>'
delhomeothernohomeexist: '<&3>[Home] Player <&b><context.args.get[2]><&3> does not have a home called <&b><context.args.get[1]>'
delhomenohomeexist: '<&3>[Home] You have no home called <&b><context.args.get[1]>'
homehomed: '<&3>[Home] You teleported to <context.args.first>'
homefirsthomed: '<&3>[Home] You teleported to <&b><yaml[UtilizenPlayerdata].read[homes].get_sub_items[1].first>'
homenohomes: '<&3>[Home] You have no homes!'
muteadmin: '<&3>[Mute] You muted <&b><server.match_player[<context.args.first>].list_name> <&3>for <<&b>><duration[<context.args.get[2]>].formatted>'
mutewasmuted: '<&3>[Mute] You were muted by <&b><player.list_name> <&3>for <&b><duration[<context.args.get[2]>].formatted>'
muteinvalidduration: '<&3>[Mute] Your Duration is invalid!'
mutenoduration: '<&3>[Mute] You need to specify a duration!'
mutealreadymute: '<&3>[Mute] This Player is already muted!'
muteplnotexist: '<&3>[Mute] This Player does not exist!'
mutesyntax: '<&3>[Mute] Syntax: <&b>/mute [Player] [Duration]'
muteyouremuted: '<&3>[Mute] You are muted!'
unmutenomute: '<&3>[Mute] This player is not muted'
unmutesyntax: '<&3>[Mute] Unmute Syntax: <&b>/unmute [Player]'
gcuptime: '<&3>Uptime:<&b>'
gcramfree: '<&3>RAM Free:<&b>'
gcramused: '<&3>RAM Used:<&b>'
gcramallocated: '<&3>Ram Allocated:<&b>'
gctps: '<&3>Current TPS:<&b>'
gcchunks: '<&3>Chunks<&b>'
gcaientities: '<&3>AIEntities:<&b>'
gctiles: '<&3>Tiles:<&b>'
gcworld: '<&f><[value]>:<&b>'
enchantsyntax: '<&3>[Enchant] Syntax: <&b>/enchant [Enchantment] (Level)'
enchantnotvalid: '<&3>[Enchant] This Enchantment is not valid.'
enchantnoint: '<&3>[Enchant] The Level must be a number and may not fall below 1'
enchantinttohigh: '<&3>[Enchant] The Level must be between <server.enchantment_start_level[<context.args.first>]> and <server.enchantment_max_level[<context.args.first>]>'
enchantnoitem: '<&3>[Enchant] You need to hold an item in your hand!'
enchantadd: '<&3>[Enchant] Your Item was enchanted with <&b><context.args.first> <&3>on Level <&b><context.args.last>'
enchantremove: '<&3>[Enchant] The Enchantment <&b><context.args.first> <&3>has been removed from your Item'
setspawnworld: '<&3>[Setspawn] Worldspawn for <&b><player.world.name> <&3>is now <&b><player.location.simple>'
setspawnnewbie: '<&3>[Setspawn] Worldspawn for new players is now <&f><player.location.simple>'
seenplayer: '<&3>[Seen] <&b><context.args.first> <&3>was last seen on <&f><yaml[Utilizen_<server.match_offline_player[<context.args.first>].uuid>].read[lastlogin].first><&3>. (<&b><tern[<server.match_offline_player[<context.args.first>].is_online>].pass[Still Online].fail[<util.date.time.duration.sub[<yaml[Utilizen_<server.match_offline_player[<context.args.first>].uuid>].read[lastlogin].last>].formatted> <&3>ago]><&3>)'
seennever: '<&3>[Seen] This player has never been seen before!'
seensyntax: '<&3>[Seen] Syntax: <&b>/seen [Player]'
notelist: '<&3>Notelist <&r><yaml[Utilizen_<[uuid]>].read[nick]||<player[<[uuid]>].name>>'
noteadded: '<&3>[Note] You added note <&r><context.args.remove[1|2].space_separated.parse_color><&r><&3> to <&b><server.match_offline_player[<context.args.first>].name>'
noteaddedadmin: '<&3>[Utilizen] <&r><player.name><&3> added a <&f>note<&3> to <&b><player[<[uuid]>].name>'
noteremoved: '<&3>[Note] You removed note <&f><context.args.last><&3> from player <&b><server.match_offline_player[<context.args.first>].name>'
noteremovedadmin: '<&3>[Utilizen] <&r><player.name><&3> removed a <&f>note<&3> from <&b><player[<[uuid]>]>'
notesyntax: '<&3>[Note] Syntax: <&b>/note [Player] (add/remove) (Text/ID)'
noteplnotexist: '<&3>[Note] This player does not exist'